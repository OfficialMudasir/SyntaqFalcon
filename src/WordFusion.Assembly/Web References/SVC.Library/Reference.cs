//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WordFusion.Assembly.MailMerge.SVC.Library {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LibrarySoap", Namespace="http://tempuri.org/")]
    public partial class Library : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CommonFilesGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback LibraryGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteReviewersGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SiteReviewersUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersReferrersGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileApprovedUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileVersionsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileOwnerGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileOwnerUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewerFeesGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewersGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewersUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileGetCurrVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileParentIDGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileIDCurrentGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileGetPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileGetFolderIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivityGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileDeletedRestoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileDocumentUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilesGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilesNamesGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilesSummaryGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilesDeletedGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewerForUserGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewerFeeGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileReviewerFeeUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersPriceGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersPriceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersSystemFeeSplitGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileUsersSystemFeeSplitUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileDocumentGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderMetaDataGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderGroupsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderGroupsUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderUserPermissionsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FolderUserPermissionsUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback VersionGetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Library() {
            this.Url = global::WordFusion.Assembly.MailMerge.Properties.Settings.Default.WordFusion_Assembly_SVC_Library_Library;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CommonFilesGetCompletedEventHandler CommonFilesGetCompleted;
        
        /// <remarks/>
        public event LibraryGetCompletedEventHandler LibraryGetCompleted;
        
        /// <remarks/>
        public event SiteReviewersGetCompletedEventHandler SiteReviewersGetCompleted;
        
        /// <remarks/>
        public event SiteReviewersUpdateCompletedEventHandler SiteReviewersUpdateCompleted;
        
        /// <remarks/>
        public event UsersGetCompletedEventHandler UsersGetCompleted;
        
        /// <remarks/>
        public event UsersReferrersGetCompletedEventHandler UsersReferrersGetCompleted;
        
        /// <remarks/>
        public event FileApprovedUpdateCompletedEventHandler FileApprovedUpdateCompleted;
        
        /// <remarks/>
        public event FileVersionsGetCompletedEventHandler FileVersionsGetCompleted;
        
        /// <remarks/>
        public event FileMoveCompletedEventHandler FileMoveCompleted;
        
        /// <remarks/>
        public event FileOwnerGetCompletedEventHandler FileOwnerGetCompleted;
        
        /// <remarks/>
        public event FileOwnerUpdateCompletedEventHandler FileOwnerUpdateCompleted;
        
        /// <remarks/>
        public event FileReviewerFeesGetCompletedEventHandler FileReviewerFeesGetCompleted;
        
        /// <remarks/>
        public event FileReviewersGetCompletedEventHandler FileReviewersGetCompleted;
        
        /// <remarks/>
        public event FileReviewersUpdateCompletedEventHandler FileReviewersUpdateCompleted;
        
        /// <remarks/>
        public event FileUsersGetCompletedEventHandler FileUsersGetCompleted;
        
        /// <remarks/>
        public event FileUsersUpdateCompletedEventHandler FileUsersUpdateCompleted;
        
        /// <remarks/>
        public event FileGetCurrVersionNumberCompletedEventHandler FileGetCurrVersionNumberCompleted;
        
        /// <remarks/>
        public event FileParentIDGetCompletedEventHandler FileParentIDGetCompleted;
        
        /// <remarks/>
        public event FileIDCurrentGetCompletedEventHandler FileIDCurrentGetCompleted;
        
        /// <remarks/>
        public event FileGetPriceCompletedEventHandler FileGetPriceCompleted;
        
        /// <remarks/>
        public event FileGetFolderIDCompletedEventHandler FileGetFolderIDCompleted;
        
        /// <remarks/>
        public event ActivityGetCompletedEventHandler ActivityGetCompleted;
        
        /// <remarks/>
        public event FileUpdateCompletedEventHandler FileUpdateCompleted;
        
        /// <remarks/>
        public event FileDeleteCompletedEventHandler FileDeleteCompleted;
        
        /// <remarks/>
        public event FileDeletedRestoreCompletedEventHandler FileDeletedRestoreCompleted;
        
        /// <remarks/>
        public event FolderInsertCompletedEventHandler FolderInsertCompleted;
        
        /// <remarks/>
        public event FolderUpdateCompletedEventHandler FolderUpdateCompleted;
        
        /// <remarks/>
        public event FolderDeleteCompletedEventHandler FolderDeleteCompleted;
        
        /// <remarks/>
        public event FileInsertCompletedEventHandler FileInsertCompleted;
        
        /// <remarks/>
        public event FileDocumentUpdateCompletedEventHandler FileDocumentUpdateCompleted;
        
        /// <remarks/>
        public event FilesGetCompletedEventHandler FilesGetCompleted;
        
        /// <remarks/>
        public event FilesNamesGetCompletedEventHandler FilesNamesGetCompleted;
        
        /// <remarks/>
        public event FilesSummaryGetCompletedEventHandler FilesSummaryGetCompleted;
        
        /// <remarks/>
        public event FilesDeletedGetCompletedEventHandler FilesDeletedGetCompleted;
        
        /// <remarks/>
        public event FileGetCompletedEventHandler FileGetCompleted;
        
        /// <remarks/>
        public event FileReviewerForUserGetCompletedEventHandler FileReviewerForUserGetCompleted;
        
        /// <remarks/>
        public event FileReviewerFeeGetCompletedEventHandler FileReviewerFeeGetCompleted;
        
        /// <remarks/>
        public event FileReviewerFeeUpdateCompletedEventHandler FileReviewerFeeUpdateCompleted;
        
        /// <remarks/>
        public event FileUsersPriceGetCompletedEventHandler FileUsersPriceGetCompleted;
        
        /// <remarks/>
        public event FileUsersPriceUpdateCompletedEventHandler FileUsersPriceUpdateCompleted;
        
        /// <remarks/>
        public event FileUsersSystemFeeSplitGetCompletedEventHandler FileUsersSystemFeeSplitGetCompleted;
        
        /// <remarks/>
        public event FileUsersSystemFeeSplitUpdateCompletedEventHandler FileUsersSystemFeeSplitUpdateCompleted;
        
        /// <remarks/>
        public event FileDocumentGetCompletedEventHandler FileDocumentGetCompleted;
        
        /// <remarks/>
        public event FolderMetaDataGetCompletedEventHandler FolderMetaDataGetCompleted;
        
        /// <remarks/>
        public event FolderGroupsGetCompletedEventHandler FolderGroupsGetCompleted;
        
        /// <remarks/>
        public event FolderGroupsUpdateCompletedEventHandler FolderGroupsUpdateCompleted;
        
        /// <remarks/>
        public event FolderUserPermissionsGetCompletedEventHandler FolderUserPermissionsGetCompleted;
        
        /// <remarks/>
        public event FolderUserPermissionsUpdateCompletedEventHandler FolderUserPermissionsUpdateCompleted;
        
        /// <remarks/>
        public event VersionGetCompletedEventHandler VersionGetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CommonFilesGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CommonFilesGet(string user) {
            object[] results = this.Invoke("CommonFilesGet", new object[] {
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CommonFilesGetAsync(string user) {
            this.CommonFilesGetAsync(user, null);
        }
        
        /// <remarks/>
        public void CommonFilesGetAsync(string user, object userState) {
            if ((this.CommonFilesGetOperationCompleted == null)) {
                this.CommonFilesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommonFilesGetOperationCompleted);
            }
            this.InvokeAsync("CommonFilesGet", new object[] {
                        user}, this.CommonFilesGetOperationCompleted, userState);
        }
        
        private void OnCommonFilesGetOperationCompleted(object arg) {
            if ((this.CommonFilesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommonFilesGetCompleted(this, new CommonFilesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LibraryGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LibraryGet(string Data, string user) {
            object[] results = this.Invoke("LibraryGet", new object[] {
                        Data,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LibraryGetAsync(string Data, string user) {
            this.LibraryGetAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void LibraryGetAsync(string Data, string user, object userState) {
            if ((this.LibraryGetOperationCompleted == null)) {
                this.LibraryGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLibraryGetOperationCompleted);
            }
            this.InvokeAsync("LibraryGet", new object[] {
                        Data,
                        user}, this.LibraryGetOperationCompleted, userState);
        }
        
        private void OnLibraryGetOperationCompleted(object arg) {
            if ((this.LibraryGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LibraryGetCompleted(this, new LibraryGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SiteReviewersGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SiteReviewersGet(string siteid, string user) {
            object[] results = this.Invoke("SiteReviewersGet", new object[] {
                        siteid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SiteReviewersGetAsync(string siteid, string user) {
            this.SiteReviewersGetAsync(siteid, user, null);
        }
        
        /// <remarks/>
        public void SiteReviewersGetAsync(string siteid, string user, object userState) {
            if ((this.SiteReviewersGetOperationCompleted == null)) {
                this.SiteReviewersGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteReviewersGetOperationCompleted);
            }
            this.InvokeAsync("SiteReviewersGet", new object[] {
                        siteid,
                        user}, this.SiteReviewersGetOperationCompleted, userState);
        }
        
        private void OnSiteReviewersGetOperationCompleted(object arg) {
            if ((this.SiteReviewersGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteReviewersGetCompleted(this, new SiteReviewersGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SiteReviewersUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SiteReviewersUpdate(string data, string userid, string user) {
            this.Invoke("SiteReviewersUpdate", new object[] {
                        data,
                        userid,
                        user});
        }
        
        /// <remarks/>
        public void SiteReviewersUpdateAsync(string data, string userid, string user) {
            this.SiteReviewersUpdateAsync(data, userid, user, null);
        }
        
        /// <remarks/>
        public void SiteReviewersUpdateAsync(string data, string userid, string user, object userState) {
            if ((this.SiteReviewersUpdateOperationCompleted == null)) {
                this.SiteReviewersUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteReviewersUpdateOperationCompleted);
            }
            this.InvokeAsync("SiteReviewersUpdate", new object[] {
                        data,
                        userid,
                        user}, this.SiteReviewersUpdateOperationCompleted, userState);
        }
        
        private void OnSiteReviewersUpdateOperationCompleted(object arg) {
            if ((this.SiteReviewersUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteReviewersUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UsersGet(string LibraryID, string user) {
            object[] results = this.Invoke("UsersGet", new object[] {
                        LibraryID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UsersGetAsync(string LibraryID, string user) {
            this.UsersGetAsync(LibraryID, user, null);
        }
        
        /// <remarks/>
        public void UsersGetAsync(string LibraryID, string user, object userState) {
            if ((this.UsersGetOperationCompleted == null)) {
                this.UsersGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersGetOperationCompleted);
            }
            this.InvokeAsync("UsersGet", new object[] {
                        LibraryID,
                        user}, this.UsersGetOperationCompleted, userState);
        }
        
        private void OnUsersGetOperationCompleted(object arg) {
            if ((this.UsersGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersGetCompleted(this, new UsersGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersReferrersGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UsersReferrersGet(string user) {
            object[] results = this.Invoke("UsersReferrersGet", new object[] {
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UsersReferrersGetAsync(string user) {
            this.UsersReferrersGetAsync(user, null);
        }
        
        /// <remarks/>
        public void UsersReferrersGetAsync(string user, object userState) {
            if ((this.UsersReferrersGetOperationCompleted == null)) {
                this.UsersReferrersGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersReferrersGetOperationCompleted);
            }
            this.InvokeAsync("UsersReferrersGet", new object[] {
                        user}, this.UsersReferrersGetOperationCompleted, userState);
        }
        
        private void OnUsersReferrersGetOperationCompleted(object arg) {
            if ((this.UsersReferrersGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersReferrersGetCompleted(this, new UsersReferrersGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileApprovedUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileApprovedUpdate(string fileid, int approved, string user) {
            this.Invoke("FileApprovedUpdate", new object[] {
                        fileid,
                        approved,
                        user});
        }
        
        /// <remarks/>
        public void FileApprovedUpdateAsync(string fileid, int approved, string user) {
            this.FileApprovedUpdateAsync(fileid, approved, user, null);
        }
        
        /// <remarks/>
        public void FileApprovedUpdateAsync(string fileid, int approved, string user, object userState) {
            if ((this.FileApprovedUpdateOperationCompleted == null)) {
                this.FileApprovedUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileApprovedUpdateOperationCompleted);
            }
            this.InvokeAsync("FileApprovedUpdate", new object[] {
                        fileid,
                        approved,
                        user}, this.FileApprovedUpdateOperationCompleted, userState);
        }
        
        private void OnFileApprovedUpdateOperationCompleted(object arg) {
            if ((this.FileApprovedUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileApprovedUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileVersionsGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileVersionsGet(string ID, string user) {
            object[] results = this.Invoke("FileVersionsGet", new object[] {
                        ID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileVersionsGetAsync(string ID, string user) {
            this.FileVersionsGetAsync(ID, user, null);
        }
        
        /// <remarks/>
        public void FileVersionsGetAsync(string ID, string user, object userState) {
            if ((this.FileVersionsGetOperationCompleted == null)) {
                this.FileVersionsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileVersionsGetOperationCompleted);
            }
            this.InvokeAsync("FileVersionsGet", new object[] {
                        ID,
                        user}, this.FileVersionsGetOperationCompleted, userState);
        }
        
        private void OnFileVersionsGetOperationCompleted(object arg) {
            if ((this.FileVersionsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileVersionsGetCompleted(this, new FileVersionsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileMove", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileMove(string fileid, string folderid, string user) {
            this.Invoke("FileMove", new object[] {
                        fileid,
                        folderid,
                        user});
        }
        
        /// <remarks/>
        public void FileMoveAsync(string fileid, string folderid, string user) {
            this.FileMoveAsync(fileid, folderid, user, null);
        }
        
        /// <remarks/>
        public void FileMoveAsync(string fileid, string folderid, string user, object userState) {
            if ((this.FileMoveOperationCompleted == null)) {
                this.FileMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileMoveOperationCompleted);
            }
            this.InvokeAsync("FileMove", new object[] {
                        fileid,
                        folderid,
                        user}, this.FileMoveOperationCompleted, userState);
        }
        
        private void OnFileMoveOperationCompleted(object arg) {
            if ((this.FileMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileMoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileOwnerGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FileOwnerGet(string fileid, string user) {
            object[] results = this.Invoke("FileOwnerGet", new object[] {
                        fileid,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FileOwnerGetAsync(string fileid, string user) {
            this.FileOwnerGetAsync(fileid, user, null);
        }
        
        /// <remarks/>
        public void FileOwnerGetAsync(string fileid, string user, object userState) {
            if ((this.FileOwnerGetOperationCompleted == null)) {
                this.FileOwnerGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileOwnerGetOperationCompleted);
            }
            this.InvokeAsync("FileOwnerGet", new object[] {
                        fileid,
                        user}, this.FileOwnerGetOperationCompleted, userState);
        }
        
        private void OnFileOwnerGetOperationCompleted(object arg) {
            if ((this.FileOwnerGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileOwnerGetCompleted(this, new FileOwnerGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileOwnerUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileOwnerUpdate(string fileid, string useridowner, string user) {
            this.Invoke("FileOwnerUpdate", new object[] {
                        fileid,
                        useridowner,
                        user});
        }
        
        /// <remarks/>
        public void FileOwnerUpdateAsync(string fileid, string useridowner, string user) {
            this.FileOwnerUpdateAsync(fileid, useridowner, user, null);
        }
        
        /// <remarks/>
        public void FileOwnerUpdateAsync(string fileid, string useridowner, string user, object userState) {
            if ((this.FileOwnerUpdateOperationCompleted == null)) {
                this.FileOwnerUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileOwnerUpdateOperationCompleted);
            }
            this.InvokeAsync("FileOwnerUpdate", new object[] {
                        fileid,
                        useridowner,
                        user}, this.FileOwnerUpdateOperationCompleted, userState);
        }
        
        private void OnFileOwnerUpdateOperationCompleted(object arg) {
            if ((this.FileOwnerUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileOwnerUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewerFeesGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileReviewerFeesGet(string fileid, string userid, string user) {
            object[] results = this.Invoke("FileReviewerFeesGet", new object[] {
                        fileid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileReviewerFeesGetAsync(string fileid, string userid, string user) {
            this.FileReviewerFeesGetAsync(fileid, userid, user, null);
        }
        
        /// <remarks/>
        public void FileReviewerFeesGetAsync(string fileid, string userid, string user, object userState) {
            if ((this.FileReviewerFeesGetOperationCompleted == null)) {
                this.FileReviewerFeesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewerFeesGetOperationCompleted);
            }
            this.InvokeAsync("FileReviewerFeesGet", new object[] {
                        fileid,
                        userid,
                        user}, this.FileReviewerFeesGetOperationCompleted, userState);
        }
        
        private void OnFileReviewerFeesGetOperationCompleted(object arg) {
            if ((this.FileReviewerFeesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewerFeesGetCompleted(this, new FileReviewerFeesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewersGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileReviewersGet(string fileid, string userid, string user) {
            object[] results = this.Invoke("FileReviewersGet", new object[] {
                        fileid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileReviewersGetAsync(string fileid, string userid, string user) {
            this.FileReviewersGetAsync(fileid, userid, user, null);
        }
        
        /// <remarks/>
        public void FileReviewersGetAsync(string fileid, string userid, string user, object userState) {
            if ((this.FileReviewersGetOperationCompleted == null)) {
                this.FileReviewersGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewersGetOperationCompleted);
            }
            this.InvokeAsync("FileReviewersGet", new object[] {
                        fileid,
                        userid,
                        user}, this.FileReviewersGetOperationCompleted, userState);
        }
        
        private void OnFileReviewersGetOperationCompleted(object arg) {
            if ((this.FileReviewersGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewersGetCompleted(this, new FileReviewersGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewersUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileReviewersUpdate(string data, string fileid, string userid, string user) {
            this.Invoke("FileReviewersUpdate", new object[] {
                        data,
                        fileid,
                        userid,
                        user});
        }
        
        /// <remarks/>
        public void FileReviewersUpdateAsync(string data, string fileid, string userid, string user) {
            this.FileReviewersUpdateAsync(data, fileid, userid, user, null);
        }
        
        /// <remarks/>
        public void FileReviewersUpdateAsync(string data, string fileid, string userid, string user, object userState) {
            if ((this.FileReviewersUpdateOperationCompleted == null)) {
                this.FileReviewersUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewersUpdateOperationCompleted);
            }
            this.InvokeAsync("FileReviewersUpdate", new object[] {
                        data,
                        fileid,
                        userid,
                        user}, this.FileReviewersUpdateOperationCompleted, userState);
        }
        
        private void OnFileReviewersUpdateOperationCompleted(object arg) {
            if ((this.FileReviewersUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewersUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileUsersGet(string fileid, string user) {
            object[] results = this.Invoke("FileUsersGet", new object[] {
                        fileid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileUsersGetAsync(string fileid, string user) {
            this.FileUsersGetAsync(fileid, user, null);
        }
        
        /// <remarks/>
        public void FileUsersGetAsync(string fileid, string user, object userState) {
            if ((this.FileUsersGetOperationCompleted == null)) {
                this.FileUsersGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersGetOperationCompleted);
            }
            this.InvokeAsync("FileUsersGet", new object[] {
                        fileid,
                        user}, this.FileUsersGetOperationCompleted, userState);
        }
        
        private void OnFileUsersGetOperationCompleted(object arg) {
            if ((this.FileUsersGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersGetCompleted(this, new FileUsersGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileUsersUpdate(string data, string fileid, string user) {
            this.Invoke("FileUsersUpdate", new object[] {
                        data,
                        fileid,
                        user});
        }
        
        /// <remarks/>
        public void FileUsersUpdateAsync(string data, string fileid, string user) {
            this.FileUsersUpdateAsync(data, fileid, user, null);
        }
        
        /// <remarks/>
        public void FileUsersUpdateAsync(string data, string fileid, string user, object userState) {
            if ((this.FileUsersUpdateOperationCompleted == null)) {
                this.FileUsersUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersUpdateOperationCompleted);
            }
            this.InvokeAsync("FileUsersUpdate", new object[] {
                        data,
                        fileid,
                        user}, this.FileUsersUpdateOperationCompleted, userState);
        }
        
        private void OnFileUsersUpdateOperationCompleted(object arg) {
            if ((this.FileUsersUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileGetCurrVersionNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int FileGetCurrVersionNumber(string ID, string user) {
            object[] results = this.Invoke("FileGetCurrVersionNumber", new object[] {
                        ID,
                        user});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FileGetCurrVersionNumberAsync(string ID, string user) {
            this.FileGetCurrVersionNumberAsync(ID, user, null);
        }
        
        /// <remarks/>
        public void FileGetCurrVersionNumberAsync(string ID, string user, object userState) {
            if ((this.FileGetCurrVersionNumberOperationCompleted == null)) {
                this.FileGetCurrVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetCurrVersionNumberOperationCompleted);
            }
            this.InvokeAsync("FileGetCurrVersionNumber", new object[] {
                        ID,
                        user}, this.FileGetCurrVersionNumberOperationCompleted, userState);
        }
        
        private void OnFileGetCurrVersionNumberOperationCompleted(object arg) {
            if ((this.FileGetCurrVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileGetCurrVersionNumberCompleted(this, new FileGetCurrVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileParentIDGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FileParentIDGet(string ID, string user) {
            object[] results = this.Invoke("FileParentIDGet", new object[] {
                        ID,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FileParentIDGetAsync(string ID, string user) {
            this.FileParentIDGetAsync(ID, user, null);
        }
        
        /// <remarks/>
        public void FileParentIDGetAsync(string ID, string user, object userState) {
            if ((this.FileParentIDGetOperationCompleted == null)) {
                this.FileParentIDGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileParentIDGetOperationCompleted);
            }
            this.InvokeAsync("FileParentIDGet", new object[] {
                        ID,
                        user}, this.FileParentIDGetOperationCompleted, userState);
        }
        
        private void OnFileParentIDGetOperationCompleted(object arg) {
            if ((this.FileParentIDGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileParentIDGetCompleted(this, new FileParentIDGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileIDCurrentGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FileIDCurrentGet(string ID, int approved, string user) {
            object[] results = this.Invoke("FileIDCurrentGet", new object[] {
                        ID,
                        approved,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FileIDCurrentGetAsync(string ID, int approved, string user) {
            this.FileIDCurrentGetAsync(ID, approved, user, null);
        }
        
        /// <remarks/>
        public void FileIDCurrentGetAsync(string ID, int approved, string user, object userState) {
            if ((this.FileIDCurrentGetOperationCompleted == null)) {
                this.FileIDCurrentGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileIDCurrentGetOperationCompleted);
            }
            this.InvokeAsync("FileIDCurrentGet", new object[] {
                        ID,
                        approved,
                        user}, this.FileIDCurrentGetOperationCompleted, userState);
        }
        
        private void OnFileIDCurrentGetOperationCompleted(object arg) {
            if ((this.FileIDCurrentGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileIDCurrentGetCompleted(this, new FileIDCurrentGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileGetPrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal FileGetPrice(string ID, string user) {
            object[] results = this.Invoke("FileGetPrice", new object[] {
                        ID,
                        user});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void FileGetPriceAsync(string ID, string user) {
            this.FileGetPriceAsync(ID, user, null);
        }
        
        /// <remarks/>
        public void FileGetPriceAsync(string ID, string user, object userState) {
            if ((this.FileGetPriceOperationCompleted == null)) {
                this.FileGetPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetPriceOperationCompleted);
            }
            this.InvokeAsync("FileGetPrice", new object[] {
                        ID,
                        user}, this.FileGetPriceOperationCompleted, userState);
        }
        
        private void OnFileGetPriceOperationCompleted(object arg) {
            if ((this.FileGetPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileGetPriceCompleted(this, new FileGetPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileGetFolderID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FileGetFolderID(string fileid, string user) {
            object[] results = this.Invoke("FileGetFolderID", new object[] {
                        fileid,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FileGetFolderIDAsync(string fileid, string user) {
            this.FileGetFolderIDAsync(fileid, user, null);
        }
        
        /// <remarks/>
        public void FileGetFolderIDAsync(string fileid, string user, object userState) {
            if ((this.FileGetFolderIDOperationCompleted == null)) {
                this.FileGetFolderIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetFolderIDOperationCompleted);
            }
            this.InvokeAsync("FileGetFolderID", new object[] {
                        fileid,
                        user}, this.FileGetFolderIDOperationCompleted, userState);
        }
        
        private void OnFileGetFolderIDOperationCompleted(object arg) {
            if ((this.FileGetFolderIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileGetFolderIDCompleted(this, new FileGetFolderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivityGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ActivityGet(string ID, string DateFrom, string DateTo) {
            object[] results = this.Invoke("ActivityGet", new object[] {
                        ID,
                        DateFrom,
                        DateTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActivityGetAsync(string ID, string DateFrom, string DateTo) {
            this.ActivityGetAsync(ID, DateFrom, DateTo, null);
        }
        
        /// <remarks/>
        public void ActivityGetAsync(string ID, string DateFrom, string DateTo, object userState) {
            if ((this.ActivityGetOperationCompleted == null)) {
                this.ActivityGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivityGetOperationCompleted);
            }
            this.InvokeAsync("ActivityGet", new object[] {
                        ID,
                        DateFrom,
                        DateTo}, this.ActivityGetOperationCompleted, userState);
        }
        
        private void OnActivityGetOperationCompleted(object arg) {
            if ((this.ActivityGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivityGetCompleted(this, new ActivityGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FileUpdate(string Data, string Form, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] DocTemplate, string user) {
            object[] results = this.Invoke("FileUpdate", new object[] {
                        Data,
                        Form,
                        DocTemplate,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FileUpdateAsync(string Data, string Form, byte[] DocTemplate, string user) {
            this.FileUpdateAsync(Data, Form, DocTemplate, user, null);
        }
        
        /// <remarks/>
        public void FileUpdateAsync(string Data, string Form, byte[] DocTemplate, string user, object userState) {
            if ((this.FileUpdateOperationCompleted == null)) {
                this.FileUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUpdateOperationCompleted);
            }
            this.InvokeAsync("FileUpdate", new object[] {
                        Data,
                        Form,
                        DocTemplate,
                        user}, this.FileUpdateOperationCompleted, userState);
        }
        
        private void OnFileUpdateOperationCompleted(object arg) {
            if ((this.FileUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUpdateCompleted(this, new FileUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FileDelete(string FileID, string user) {
            object[] results = this.Invoke("FileDelete", new object[] {
                        FileID,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FileDeleteAsync(string FileID, string user) {
            this.FileDeleteAsync(FileID, user, null);
        }
        
        /// <remarks/>
        public void FileDeleteAsync(string FileID, string user, object userState) {
            if ((this.FileDeleteOperationCompleted == null)) {
                this.FileDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDeleteOperationCompleted);
            }
            this.InvokeAsync("FileDelete", new object[] {
                        FileID,
                        user}, this.FileDeleteOperationCompleted, userState);
        }
        
        private void OnFileDeleteOperationCompleted(object arg) {
            if ((this.FileDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileDeleteCompleted(this, new FileDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileDeletedRestore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FileDeletedRestore(string FileID, string user) {
            object[] results = this.Invoke("FileDeletedRestore", new object[] {
                        FileID,
                        user});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FileDeletedRestoreAsync(string FileID, string user) {
            this.FileDeletedRestoreAsync(FileID, user, null);
        }
        
        /// <remarks/>
        public void FileDeletedRestoreAsync(string FileID, string user, object userState) {
            if ((this.FileDeletedRestoreOperationCompleted == null)) {
                this.FileDeletedRestoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDeletedRestoreOperationCompleted);
            }
            this.InvokeAsync("FileDeletedRestore", new object[] {
                        FileID,
                        user}, this.FileDeletedRestoreOperationCompleted, userState);
        }
        
        private void OnFileDeletedRestoreOperationCompleted(object arg) {
            if ((this.FileDeletedRestoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileDeletedRestoreCompleted(this, new FileDeletedRestoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderInsert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FolderInsert(string Data, string user) {
            this.Invoke("FolderInsert", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FolderInsertAsync(string Data, string user) {
            this.FolderInsertAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FolderInsertAsync(string Data, string user, object userState) {
            if ((this.FolderInsertOperationCompleted == null)) {
                this.FolderInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderInsertOperationCompleted);
            }
            this.InvokeAsync("FolderInsert", new object[] {
                        Data,
                        user}, this.FolderInsertOperationCompleted, userState);
        }
        
        private void OnFolderInsertOperationCompleted(object arg) {
            if ((this.FolderInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FolderUpdate(string Data, string user) {
            this.Invoke("FolderUpdate", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FolderUpdateAsync(string Data, string user) {
            this.FolderUpdateAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FolderUpdateAsync(string Data, string user, object userState) {
            if ((this.FolderUpdateOperationCompleted == null)) {
                this.FolderUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderUpdateOperationCompleted);
            }
            this.InvokeAsync("FolderUpdate", new object[] {
                        Data,
                        user}, this.FolderUpdateOperationCompleted, userState);
        }
        
        private void OnFolderUpdateOperationCompleted(object arg) {
            if ((this.FolderUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FolderDelete(string Data, string user) {
            this.Invoke("FolderDelete", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FolderDeleteAsync(string Data, string user) {
            this.FolderDeleteAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FolderDeleteAsync(string Data, string user, object userState) {
            if ((this.FolderDeleteOperationCompleted == null)) {
                this.FolderDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderDeleteOperationCompleted);
            }
            this.InvokeAsync("FolderDelete", new object[] {
                        Data,
                        user}, this.FolderDeleteOperationCompleted, userState);
        }
        
        private void OnFolderDeleteOperationCompleted(object arg) {
            if ((this.FolderDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileInsert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileInsert(string Data, string Form, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] DocTemplate, string user) {
            object[] results = this.Invoke("FileInsert", new object[] {
                        Data,
                        Form,
                        DocTemplate,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileInsertAsync(string Data, string Form, byte[] DocTemplate, string user) {
            this.FileInsertAsync(Data, Form, DocTemplate, user, null);
        }
        
        /// <remarks/>
        public void FileInsertAsync(string Data, string Form, byte[] DocTemplate, string user, object userState) {
            if ((this.FileInsertOperationCompleted == null)) {
                this.FileInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileInsertOperationCompleted);
            }
            this.InvokeAsync("FileInsert", new object[] {
                        Data,
                        Form,
                        DocTemplate,
                        user}, this.FileInsertOperationCompleted, userState);
        }
        
        private void OnFileInsertOperationCompleted(object arg) {
            if ((this.FileInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileInsertCompleted(this, new FileInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileDocumentUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileDocumentUpdate(string formid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] DocTemplate, string user) {
            object[] results = this.Invoke("FileDocumentUpdate", new object[] {
                        formid,
                        DocTemplate,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileDocumentUpdateAsync(string formid, byte[] DocTemplate, string user) {
            this.FileDocumentUpdateAsync(formid, DocTemplate, user, null);
        }
        
        /// <remarks/>
        public void FileDocumentUpdateAsync(string formid, byte[] DocTemplate, string user, object userState) {
            if ((this.FileDocumentUpdateOperationCompleted == null)) {
                this.FileDocumentUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDocumentUpdateOperationCompleted);
            }
            this.InvokeAsync("FileDocumentUpdate", new object[] {
                        formid,
                        DocTemplate,
                        user}, this.FileDocumentUpdateOperationCompleted, userState);
        }
        
        private void OnFileDocumentUpdateOperationCompleted(object arg) {
            if ((this.FileDocumentUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileDocumentUpdateCompleted(this, new FileDocumentUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FilesGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FilesGet(string FolderID, string user) {
            object[] results = this.Invoke("FilesGet", new object[] {
                        FolderID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FilesGetAsync(string FolderID, string user) {
            this.FilesGetAsync(FolderID, user, null);
        }
        
        /// <remarks/>
        public void FilesGetAsync(string FolderID, string user, object userState) {
            if ((this.FilesGetOperationCompleted == null)) {
                this.FilesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilesGetOperationCompleted);
            }
            this.InvokeAsync("FilesGet", new object[] {
                        FolderID,
                        user}, this.FilesGetOperationCompleted, userState);
        }
        
        private void OnFilesGetOperationCompleted(object arg) {
            if ((this.FilesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilesGetCompleted(this, new FilesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FilesNamesGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FilesNamesGet(string folderid, string user) {
            object[] results = this.Invoke("FilesNamesGet", new object[] {
                        folderid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FilesNamesGetAsync(string folderid, string user) {
            this.FilesNamesGetAsync(folderid, user, null);
        }
        
        /// <remarks/>
        public void FilesNamesGetAsync(string folderid, string user, object userState) {
            if ((this.FilesNamesGetOperationCompleted == null)) {
                this.FilesNamesGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilesNamesGetOperationCompleted);
            }
            this.InvokeAsync("FilesNamesGet", new object[] {
                        folderid,
                        user}, this.FilesNamesGetOperationCompleted, userState);
        }
        
        private void OnFilesNamesGetOperationCompleted(object arg) {
            if ((this.FilesNamesGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilesNamesGetCompleted(this, new FilesNamesGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FilesSummaryGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FilesSummaryGet(string FolderID, string user) {
            object[] results = this.Invoke("FilesSummaryGet", new object[] {
                        FolderID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FilesSummaryGetAsync(string FolderID, string user) {
            this.FilesSummaryGetAsync(FolderID, user, null);
        }
        
        /// <remarks/>
        public void FilesSummaryGetAsync(string FolderID, string user, object userState) {
            if ((this.FilesSummaryGetOperationCompleted == null)) {
                this.FilesSummaryGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilesSummaryGetOperationCompleted);
            }
            this.InvokeAsync("FilesSummaryGet", new object[] {
                        FolderID,
                        user}, this.FilesSummaryGetOperationCompleted, userState);
        }
        
        private void OnFilesSummaryGetOperationCompleted(object arg) {
            if ((this.FilesSummaryGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilesSummaryGetCompleted(this, new FilesSummaryGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FilesDeletedGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FilesDeletedGet(string user) {
            object[] results = this.Invoke("FilesDeletedGet", new object[] {
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FilesDeletedGetAsync(string user) {
            this.FilesDeletedGetAsync(user, null);
        }
        
        /// <remarks/>
        public void FilesDeletedGetAsync(string user, object userState) {
            if ((this.FilesDeletedGetOperationCompleted == null)) {
                this.FilesDeletedGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilesDeletedGetOperationCompleted);
            }
            this.InvokeAsync("FilesDeletedGet", new object[] {
                        user}, this.FilesDeletedGetOperationCompleted, userState);
        }
        
        private void OnFilesDeletedGetOperationCompleted(object arg) {
            if ((this.FilesDeletedGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilesDeletedGetCompleted(this, new FilesDeletedGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileGet(string id, bool currver, bool approved, string user) {
            object[] results = this.Invoke("FileGet", new object[] {
                        id,
                        currver,
                        approved,
                        user});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FileGetAsync(string id, bool currver, bool approved, string user) {
            this.FileGetAsync(id, currver, approved, user, null);
        }
        
        /// <remarks/>
        public void FileGetAsync(string id, bool currver, bool approved, string user, object userState) {
            if ((this.FileGetOperationCompleted == null)) {
                this.FileGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileGetOperationCompleted);
            }
            this.InvokeAsync("FileGet", new object[] {
                        id,
                        currver,
                        approved,
                        user}, this.FileGetOperationCompleted, userState);
        }
        
        private void OnFileGetOperationCompleted(object arg) {
            if ((this.FileGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileGetCompleted(this, new FileGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewerForUserGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileReviewerForUserGet(string fileid, string userid, string user) {
            object[] results = this.Invoke("FileReviewerForUserGet", new object[] {
                        fileid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileReviewerForUserGetAsync(string fileid, string userid, string user) {
            this.FileReviewerForUserGetAsync(fileid, userid, user, null);
        }
        
        /// <remarks/>
        public void FileReviewerForUserGetAsync(string fileid, string userid, string user, object userState) {
            if ((this.FileReviewerForUserGetOperationCompleted == null)) {
                this.FileReviewerForUserGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewerForUserGetOperationCompleted);
            }
            this.InvokeAsync("FileReviewerForUserGet", new object[] {
                        fileid,
                        userid,
                        user}, this.FileReviewerForUserGetOperationCompleted, userState);
        }
        
        private void OnFileReviewerForUserGetOperationCompleted(object arg) {
            if ((this.FileReviewerForUserGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewerForUserGetCompleted(this, new FileReviewerForUserGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewerFeeGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal FileReviewerFeeGet(string[] fileids, string UserIDReviewer, string UserIDReviewee, string user) {
            object[] results = this.Invoke("FileReviewerFeeGet", new object[] {
                        fileids,
                        UserIDReviewer,
                        UserIDReviewee,
                        user});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void FileReviewerFeeGetAsync(string[] fileids, string UserIDReviewer, string UserIDReviewee, string user) {
            this.FileReviewerFeeGetAsync(fileids, UserIDReviewer, UserIDReviewee, user, null);
        }
        
        /// <remarks/>
        public void FileReviewerFeeGetAsync(string[] fileids, string UserIDReviewer, string UserIDReviewee, string user, object userState) {
            if ((this.FileReviewerFeeGetOperationCompleted == null)) {
                this.FileReviewerFeeGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewerFeeGetOperationCompleted);
            }
            this.InvokeAsync("FileReviewerFeeGet", new object[] {
                        fileids,
                        UserIDReviewer,
                        UserIDReviewee,
                        user}, this.FileReviewerFeeGetOperationCompleted, userState);
        }
        
        private void OnFileReviewerFeeGetOperationCompleted(object arg) {
            if ((this.FileReviewerFeeGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewerFeeGetCompleted(this, new FileReviewerFeeGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileReviewerFeeUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileReviewerFeeUpdate(string Data, string user) {
            this.Invoke("FileReviewerFeeUpdate", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FileReviewerFeeUpdateAsync(string Data, string user) {
            this.FileReviewerFeeUpdateAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FileReviewerFeeUpdateAsync(string Data, string user, object userState) {
            if ((this.FileReviewerFeeUpdateOperationCompleted == null)) {
                this.FileReviewerFeeUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileReviewerFeeUpdateOperationCompleted);
            }
            this.InvokeAsync("FileReviewerFeeUpdate", new object[] {
                        Data,
                        user}, this.FileReviewerFeeUpdateOperationCompleted, userState);
        }
        
        private void OnFileReviewerFeeUpdateOperationCompleted(object arg) {
            if ((this.FileReviewerFeeUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileReviewerFeeUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersPriceGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileUsersPriceGet(string FileID, string user) {
            object[] results = this.Invoke("FileUsersPriceGet", new object[] {
                        FileID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileUsersPriceGetAsync(string FileID, string user) {
            this.FileUsersPriceGetAsync(FileID, user, null);
        }
        
        /// <remarks/>
        public void FileUsersPriceGetAsync(string FileID, string user, object userState) {
            if ((this.FileUsersPriceGetOperationCompleted == null)) {
                this.FileUsersPriceGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersPriceGetOperationCompleted);
            }
            this.InvokeAsync("FileUsersPriceGet", new object[] {
                        FileID,
                        user}, this.FileUsersPriceGetOperationCompleted, userState);
        }
        
        private void OnFileUsersPriceGetOperationCompleted(object arg) {
            if ((this.FileUsersPriceGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersPriceGetCompleted(this, new FileUsersPriceGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersPriceUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileUsersPriceUpdate(string Data, string user) {
            this.Invoke("FileUsersPriceUpdate", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FileUsersPriceUpdateAsync(string Data, string user) {
            this.FileUsersPriceUpdateAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FileUsersPriceUpdateAsync(string Data, string user, object userState) {
            if ((this.FileUsersPriceUpdateOperationCompleted == null)) {
                this.FileUsersPriceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersPriceUpdateOperationCompleted);
            }
            this.InvokeAsync("FileUsersPriceUpdate", new object[] {
                        Data,
                        user}, this.FileUsersPriceUpdateOperationCompleted, userState);
        }
        
        private void OnFileUsersPriceUpdateOperationCompleted(object arg) {
            if ((this.FileUsersPriceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersPriceUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersSystemFeeSplitGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileUsersSystemFeeSplitGet(string fileid, string userid, string user) {
            object[] results = this.Invoke("FileUsersSystemFeeSplitGet", new object[] {
                        fileid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileUsersSystemFeeSplitGetAsync(string fileid, string userid, string user) {
            this.FileUsersSystemFeeSplitGetAsync(fileid, userid, user, null);
        }
        
        /// <remarks/>
        public void FileUsersSystemFeeSplitGetAsync(string fileid, string userid, string user, object userState) {
            if ((this.FileUsersSystemFeeSplitGetOperationCompleted == null)) {
                this.FileUsersSystemFeeSplitGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersSystemFeeSplitGetOperationCompleted);
            }
            this.InvokeAsync("FileUsersSystemFeeSplitGet", new object[] {
                        fileid,
                        userid,
                        user}, this.FileUsersSystemFeeSplitGetOperationCompleted, userState);
        }
        
        private void OnFileUsersSystemFeeSplitGetOperationCompleted(object arg) {
            if ((this.FileUsersSystemFeeSplitGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersSystemFeeSplitGetCompleted(this, new FileUsersSystemFeeSplitGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileUsersSystemFeeSplitUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FileUsersSystemFeeSplitUpdate(string Data, string user) {
            this.Invoke("FileUsersSystemFeeSplitUpdate", new object[] {
                        Data,
                        user});
        }
        
        /// <remarks/>
        public void FileUsersSystemFeeSplitUpdateAsync(string Data, string user) {
            this.FileUsersSystemFeeSplitUpdateAsync(Data, user, null);
        }
        
        /// <remarks/>
        public void FileUsersSystemFeeSplitUpdateAsync(string Data, string user, object userState) {
            if ((this.FileUsersSystemFeeSplitUpdateOperationCompleted == null)) {
                this.FileUsersSystemFeeSplitUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileUsersSystemFeeSplitUpdateOperationCompleted);
            }
            this.InvokeAsync("FileUsersSystemFeeSplitUpdate", new object[] {
                        Data,
                        user}, this.FileUsersSystemFeeSplitUpdateOperationCompleted, userState);
        }
        
        private void OnFileUsersSystemFeeSplitUpdateOperationCompleted(object arg) {
            if ((this.FileUsersSystemFeeSplitUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileUsersSystemFeeSplitUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileDocumentGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileDocumentGet(string id, bool currver, string user) {
            object[] results = this.Invoke("FileDocumentGet", new object[] {
                        id,
                        currver,
                        user});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FileDocumentGetAsync(string id, bool currver, string user) {
            this.FileDocumentGetAsync(id, currver, user, null);
        }
        
        /// <remarks/>
        public void FileDocumentGetAsync(string id, bool currver, string user, object userState) {
            if ((this.FileDocumentGetOperationCompleted == null)) {
                this.FileDocumentGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileDocumentGetOperationCompleted);
            }
            this.InvokeAsync("FileDocumentGet", new object[] {
                        id,
                        currver,
                        user}, this.FileDocumentGetOperationCompleted, userState);
        }
        
        private void OnFileDocumentGetOperationCompleted(object arg) {
            if ((this.FileDocumentGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileDocumentGetCompleted(this, new FileDocumentGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderMetaDataGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FolderMetaDataGet(string FolderID, string user) {
            object[] results = this.Invoke("FolderMetaDataGet", new object[] {
                        FolderID,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FolderMetaDataGetAsync(string FolderID, string user) {
            this.FolderMetaDataGetAsync(FolderID, user, null);
        }
        
        /// <remarks/>
        public void FolderMetaDataGetAsync(string FolderID, string user, object userState) {
            if ((this.FolderMetaDataGetOperationCompleted == null)) {
                this.FolderMetaDataGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderMetaDataGetOperationCompleted);
            }
            this.InvokeAsync("FolderMetaDataGet", new object[] {
                        FolderID,
                        user}, this.FolderMetaDataGetOperationCompleted, userState);
        }
        
        private void OnFolderMetaDataGetOperationCompleted(object arg) {
            if ((this.FolderMetaDataGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderMetaDataGetCompleted(this, new FolderMetaDataGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderGroupsGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FolderGroupsGet(string folderid, string userid, string user) {
            object[] results = this.Invoke("FolderGroupsGet", new object[] {
                        folderid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FolderGroupsGetAsync(string folderid, string userid, string user) {
            this.FolderGroupsGetAsync(folderid, userid, user, null);
        }
        
        /// <remarks/>
        public void FolderGroupsGetAsync(string folderid, string userid, string user, object userState) {
            if ((this.FolderGroupsGetOperationCompleted == null)) {
                this.FolderGroupsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGroupsGetOperationCompleted);
            }
            this.InvokeAsync("FolderGroupsGet", new object[] {
                        folderid,
                        userid,
                        user}, this.FolderGroupsGetOperationCompleted, userState);
        }
        
        private void OnFolderGroupsGetOperationCompleted(object arg) {
            if ((this.FolderGroupsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderGroupsGetCompleted(this, new FolderGroupsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderGroupsUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FolderGroupsUpdate(string data, string user) {
            this.Invoke("FolderGroupsUpdate", new object[] {
                        data,
                        user});
        }
        
        /// <remarks/>
        public void FolderGroupsUpdateAsync(string data, string user) {
            this.FolderGroupsUpdateAsync(data, user, null);
        }
        
        /// <remarks/>
        public void FolderGroupsUpdateAsync(string data, string user, object userState) {
            if ((this.FolderGroupsUpdateOperationCompleted == null)) {
                this.FolderGroupsUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderGroupsUpdateOperationCompleted);
            }
            this.InvokeAsync("FolderGroupsUpdate", new object[] {
                        data,
                        user}, this.FolderGroupsUpdateOperationCompleted, userState);
        }
        
        private void OnFolderGroupsUpdateOperationCompleted(object arg) {
            if ((this.FolderGroupsUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderGroupsUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderUserPermissionsGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FolderUserPermissionsGet(string folderid, string userid, string user) {
            object[] results = this.Invoke("FolderUserPermissionsGet", new object[] {
                        folderid,
                        userid,
                        user});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FolderUserPermissionsGetAsync(string folderid, string userid, string user) {
            this.FolderUserPermissionsGetAsync(folderid, userid, user, null);
        }
        
        /// <remarks/>
        public void FolderUserPermissionsGetAsync(string folderid, string userid, string user, object userState) {
            if ((this.FolderUserPermissionsGetOperationCompleted == null)) {
                this.FolderUserPermissionsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderUserPermissionsGetOperationCompleted);
            }
            this.InvokeAsync("FolderUserPermissionsGet", new object[] {
                        folderid,
                        userid,
                        user}, this.FolderUserPermissionsGetOperationCompleted, userState);
        }
        
        private void OnFolderUserPermissionsGetOperationCompleted(object arg) {
            if ((this.FolderUserPermissionsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderUserPermissionsGetCompleted(this, new FolderUserPermissionsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderUserPermissionsUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FolderUserPermissionsUpdate(string data, string userid, string user) {
            this.Invoke("FolderUserPermissionsUpdate", new object[] {
                        data,
                        userid,
                        user});
        }
        
        /// <remarks/>
        public void FolderUserPermissionsUpdateAsync(string data, string userid, string user) {
            this.FolderUserPermissionsUpdateAsync(data, userid, user, null);
        }
        
        /// <remarks/>
        public void FolderUserPermissionsUpdateAsync(string data, string userid, string user, object userState) {
            if ((this.FolderUserPermissionsUpdateOperationCompleted == null)) {
                this.FolderUserPermissionsUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFolderUserPermissionsUpdateOperationCompleted);
            }
            this.InvokeAsync("FolderUserPermissionsUpdate", new object[] {
                        data,
                        userid,
                        user}, this.FolderUserPermissionsUpdateOperationCompleted, userState);
        }
        
        private void OnFolderUserPermissionsUpdateOperationCompleted(object arg) {
            if ((this.FolderUserPermissionsUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FolderUserPermissionsUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VersionGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VersionGet() {
            object[] results = this.Invoke("VersionGet", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VersionGetAsync() {
            this.VersionGetAsync(null);
        }
        
        /// <remarks/>
        public void VersionGetAsync(object userState) {
            if ((this.VersionGetOperationCompleted == null)) {
                this.VersionGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVersionGetOperationCompleted);
            }
            this.InvokeAsync("VersionGet", new object[0], this.VersionGetOperationCompleted, userState);
        }
        
        private void OnVersionGetOperationCompleted(object arg) {
            if ((this.VersionGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VersionGetCompleted(this, new VersionGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CommonFilesGetCompletedEventHandler(object sender, CommonFilesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommonFilesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommonFilesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void LibraryGetCompletedEventHandler(object sender, LibraryGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LibraryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LibraryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SiteReviewersGetCompletedEventHandler(object sender, SiteReviewersGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteReviewersGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SiteReviewersGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SiteReviewersUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UsersGetCompletedEventHandler(object sender, UsersGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UsersReferrersGetCompletedEventHandler(object sender, UsersReferrersGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersReferrersGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersReferrersGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileApprovedUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileVersionsGetCompletedEventHandler(object sender, FileVersionsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileVersionsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileVersionsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileMoveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileOwnerGetCompletedEventHandler(object sender, FileOwnerGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileOwnerGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileOwnerGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileOwnerUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewerFeesGetCompletedEventHandler(object sender, FileReviewerFeesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileReviewerFeesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileReviewerFeesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewersGetCompletedEventHandler(object sender, FileReviewersGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileReviewersGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileReviewersGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewersUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersGetCompletedEventHandler(object sender, FileUsersGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileUsersGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileUsersGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileGetCurrVersionNumberCompletedEventHandler(object sender, FileGetCurrVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileGetCurrVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileGetCurrVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileParentIDGetCompletedEventHandler(object sender, FileParentIDGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileParentIDGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileParentIDGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileIDCurrentGetCompletedEventHandler(object sender, FileIDCurrentGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileIDCurrentGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileIDCurrentGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileGetPriceCompletedEventHandler(object sender, FileGetPriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileGetPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileGetPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileGetFolderIDCompletedEventHandler(object sender, FileGetFolderIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileGetFolderIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileGetFolderIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivityGetCompletedEventHandler(object sender, ActivityGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivityGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivityGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUpdateCompletedEventHandler(object sender, FileUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileDeleteCompletedEventHandler(object sender, FileDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileDeletedRestoreCompletedEventHandler(object sender, FileDeletedRestoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDeletedRestoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileDeletedRestoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileInsertCompletedEventHandler(object sender, FileInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileDocumentUpdateCompletedEventHandler(object sender, FileDocumentUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDocumentUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileDocumentUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FilesGetCompletedEventHandler(object sender, FilesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FilesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FilesNamesGetCompletedEventHandler(object sender, FilesNamesGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilesNamesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FilesNamesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FilesSummaryGetCompletedEventHandler(object sender, FilesSummaryGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilesSummaryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FilesSummaryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FilesDeletedGetCompletedEventHandler(object sender, FilesDeletedGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilesDeletedGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FilesDeletedGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileGetCompletedEventHandler(object sender, FileGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewerForUserGetCompletedEventHandler(object sender, FileReviewerForUserGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileReviewerForUserGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileReviewerForUserGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewerFeeGetCompletedEventHandler(object sender, FileReviewerFeeGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileReviewerFeeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileReviewerFeeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileReviewerFeeUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersPriceGetCompletedEventHandler(object sender, FileUsersPriceGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileUsersPriceGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileUsersPriceGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersPriceUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersSystemFeeSplitGetCompletedEventHandler(object sender, FileUsersSystemFeeSplitGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileUsersSystemFeeSplitGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileUsersSystemFeeSplitGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileUsersSystemFeeSplitUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FileDocumentGetCompletedEventHandler(object sender, FileDocumentGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDocumentGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileDocumentGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderMetaDataGetCompletedEventHandler(object sender, FolderMetaDataGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FolderMetaDataGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FolderMetaDataGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderGroupsGetCompletedEventHandler(object sender, FolderGroupsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FolderGroupsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FolderGroupsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderGroupsUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderUserPermissionsGetCompletedEventHandler(object sender, FolderUserPermissionsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FolderUserPermissionsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FolderUserPermissionsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void FolderUserPermissionsUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void VersionGetCompletedEventHandler(object sender, VersionGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VersionGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VersionGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591